<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>C语言课设（汽车销售管理系统）</title>
      <link href="/2023/06/29/2023-6-29-C%E8%AF%AD%E8%A8%80%E8%AF%BE%E8%AE%BE%EF%BC%88%E6%B1%BD%E8%BD%A6%E9%94%80%E5%94%AE%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%EF%BC%89/"/>
      <url>/2023/06/29/2023-6-29-C%E8%AF%AD%E8%A8%80%E8%AF%BE%E8%AE%BE%EF%BC%88%E6%B1%BD%E8%BD%A6%E9%94%80%E5%94%AE%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="汽车销售管理系统"><a href="#汽车销售管理系统" class="headerlink" title="汽车销售管理系统"></a>汽车销售管理系统</h1><ol><li>目的<ul><li>通过本次课程设计，强化上机动手能力，使学生在理论和实践的基础上进一步巩固《高级语言程序设计-C语言》课程学习的内容，掌握高级语言程序设计的基本方法。</li><li>通过系统分析、系统设计、编程调试，写实验报告等环节，初步掌握软件系统设计的方法和步骤，训练灵活运用程序设计语言进行软件开发的能力，提高分析问题和解决问题的能力，提高程序设计水平，培养必要的工程实践动手能力。</li><li>学会将知识应用于实际的方法，提高分析和解决问题的能力。</li></ul></li><li>知识点<ul><li>掌握并熟练运用C语言的基本数据类型与各种表达式，程序的流程控制语句。</li><li>掌握数组的基本概念。熟悉掌握一维数组和二维数组的使用，掌握字符数组与字符串的关系以及字符串的简单处理，会分析、编写利用数组进行数据存储与处理的简单程序。</li><li>熟悉指针、地址、链表的操作等概念。</li><li>掌握函数的定义、函数的返回值、函数的调用、函数的形参和实参之间的关系、变量的作用域、函数的作用域。</li><li>掌握结构体的概念，结构类型的定义，结构体变量的定义和初始化，结构体成员的表示、赋值。</li><li>掌握文件的基本操作。</li></ul></li><li>系统基本要求<ol><li>数据录入：录入系统所需的数据,用数组或链表组织数据；</li><li>数据存储：将录入的数据存储在文件中；</li><li>数据读写：对存放数据的文件能进行读写操作；</li><li>数据修改：对数据进行更新操作，可以进行新数据的插入，旧数据的修改操作；</li><li>数据删除：对数据进行删除操作，根据相应记录中的字段将对应记录删除；</li><li>数据查询：按某个字段或几个字段的组合对数据进行查询（即简单查询及组合查询）；</li><li>数据排序：按要求对数据进行排序，含升序排序及降序排序；</li></ol></li></ol><p><strong>以下是源码：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_CARS 100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">char</span> brand[<span class="number">20</span>];</span><br><span class="line">    <span class="type">char</span> model[<span class="number">20</span>];</span><br><span class="line">    <span class="type">int</span> year;</span><br><span class="line">    <span class="type">double</span> price;</span><br><span class="line">&#125; Car;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">addCar</span><span class="params">(Car *carInventory, <span class="type">int</span> *carCount)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (*carCount == MAX_CARS) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;无法添加新车，汽车库已满。\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Car newCar;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入品牌：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, newCar.brand);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入型号：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, newCar.model);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入生产年份：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;newCar.year);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入价格：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;newCar.price);</span><br><span class="line"></span><br><span class="line">    carInventory[(*carCount)++] = newCar;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;成功添加新车。\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">saveInventoryToFile</span><span class="params">(Car *carInventory, <span class="type">int</span> carCount)</span> &#123;</span><br><span class="line">    FILE *file = fopen(<span class="string">&quot;car_inventory.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (file == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;无法保存库存数据到文件。\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; carCount; i++) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(file, <span class="string">&quot;%s %s %d %.2lf\n&quot;</span>, carInventory[i].brand, carInventory[i].model, carInventory[i].year, carInventory[i].price);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fclose(file);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;库存数据保存成功。\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">loadInventoryFromFile</span><span class="params">(Car *carInventory, <span class="type">int</span> *carCount)</span> &#123;</span><br><span class="line">    FILE *file = fopen(<span class="string">&quot;car_inventory.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (file == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;无法从文件加载库存数据。\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    *carCount = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">fscanf</span>(file, <span class="string">&quot;%s %s %d %lf&quot;</span>, carInventory[*carCount].brand, carInventory[*carCount].model, &amp;carInventory[*carCount].year, &amp;carInventory[*carCount].price) == <span class="number">4</span>) &#123;</span><br><span class="line">        (*carCount)++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fclose(file);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;库存数据加载成功。\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printCar</span><span class="params">(Car car)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;品牌：%s\n&quot;</span>, car.brand);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;型号：%s\n&quot;</span>, car.model);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;生产年份：%d\n&quot;</span>, car.year);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;价格：%.2lf\n&quot;</span>, car.price);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">displayInventory</span><span class="params">(Car *carInventory, <span class="type">int</span> carCount)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (carCount == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;汽车库存为空。\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; carCount; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;汽车 %d:\n&quot;</span>, i + <span class="number">1</span>);</span><br><span class="line">        printCar(carInventory[i]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">findCarIndexByBrandAndModel</span><span class="params">(Car *carInventory, <span class="type">int</span> carCount, <span class="type">char</span> brand[<span class="number">20</span>], <span class="type">char</span> model[<span class="number">20</span>])</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; carCount; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(carInventory[i].brand, brand) == <span class="number">0</span> &amp;&amp; <span class="built_in">strcmp</span>(carInventory[i].model, model) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">updateCar</span><span class="params">(Car *carInventory, <span class="type">int</span> carCount)</span> &#123;</span><br><span class="line">    <span class="type">char</span> brand[<span class="number">20</span>];</span><br><span class="line">    <span class="type">char</span> model[<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入要修改的车辆品牌：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, brand);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入要修改的车辆型号：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, model);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> carIndex = findCarIndexByBrandAndModel(carInventory, carCount, brand, model);</span><br><span class="line">    <span class="keyword">if</span> (carIndex == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;找不到该车辆。\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Car updatedCar;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入新的品牌：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, updatedCar.brand);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入新的型号：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, updatedCar.model);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入新的生产年份：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;updatedCar.year);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入新的价格：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;updatedCar.price);</span><br><span class="line"></span><br><span class="line">    carInventory[carIndex] = updatedCar;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;车辆信息已更新。\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">deleteCar</span><span class="params">(Car *carInventory, <span class="type">int</span> *carCount)</span> &#123;</span><br><span class="line">    <span class="type">char</span> brand[<span class="number">20</span>];</span><br><span class="line">    <span class="type">char</span> model[<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入要删除的车辆品牌：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, brand);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入要删除的车辆型号：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, model);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> carIndex = findCarIndexByBrandAndModel(carInventory, *carCount, brand, model);</span><br><span class="line">    <span class="keyword">if</span> (carIndex == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;找不到该车辆。\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = carIndex; i &lt; *carCount - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        carInventory[i] = carInventory[i + <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    (*carCount)--;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;车辆已成功删除。\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">searchCar</span><span class="params">(Car *carInventory, <span class="type">int</span> carCount)</span> &#123;</span><br><span class="line">    <span class="type">char</span> brand[<span class="number">20</span>];</span><br><span class="line">    <span class="type">char</span> model[<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入要查询的车辆品牌：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, brand);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入要查询的车辆型号：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, model);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> carIndex = findCarIndexByBrandAndModel(carInventory, carCount, brand, model);</span><br><span class="line">    <span class="keyword">if</span> (carIndex == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;找不到该车辆。\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;找到以下车辆：\n&quot;</span>);</span><br><span class="line">    printCar(carInventory[carIndex]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">sortByPrice</span><span class="params">(Car *carInventory, <span class="type">int</span> carCount)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; carCount - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; carCount - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (carInventory[j].price &gt; carInventory[j + <span class="number">1</span>].price) &#123;</span><br><span class="line">                Car temp = carInventory[j];</span><br><span class="line">                carInventory[j] = carInventory[j + <span class="number">1</span>];</span><br><span class="line">                carInventory[j + <span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;按价格排序完成。\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    Car carInventory[MAX_CARS];</span><br><span class="line">    <span class="type">int</span> carCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    loadInventoryFromFile(carInventory, &amp;carCount);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> choice;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n汽车管理系统\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;1. 添加车辆\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;2. 保存库存数据到文件\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;3. 显示库存数据\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;4. 修改车辆信息\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;5. 删除车辆\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;6. 查询车辆\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;7. 按价格排序\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;8. 退出\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;请选择操作：&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;choice);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (choice) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                addCar(carInventory, &amp;carCount);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                saveInventoryToFile(carInventory, carCount);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                displayInventory(carInventory, carCount);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                updateCar(carInventory, carCount);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                deleteCar(carInventory, &amp;carCount);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                searchCar(carInventory, carCount);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                sortByPrice(carInventory, carCount);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;感谢使用！\n&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;无效的选项，请重新选择。\n&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (choice != <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>该代码适用于<strong>Dev</strong>和<strong>CLion</strong>，如果用<strong>Visual Studio</strong>至少需要将<em>scanf</em>改为<em>scanf_s</em>，其他的根据编译器给的报错进行修改。</p>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GC语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git用法(基础)</title>
      <link href="/2023/05/10/2023-5-10-Git%E7%94%A8%E6%B3%95-%E5%9F%BA%E7%A1%80/"/>
      <url>/2023/05/10/2023-5-10-Git%E7%94%A8%E6%B3%95-%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="Git用法（基础）"><a href="#Git用法（基础）" class="headerlink" title="Git用法（基础）"></a>Git用法（基础）</h1><h2 id="使用之前"><a href="#使用之前" class="headerlink" title="使用之前"></a>使用之前</h2><ul><li><code>git config  - -global user.name &quot;提交人&quot;</code></li><li><code>git config  - -global user.email &quot;邮箱地址&quot;</code></li></ul><h2 id="提交步骤"><a href="#提交步骤" class="headerlink" title="提交步骤"></a>提交步骤</h2><ol><li><code>git init</code> 初始化git仓库</li><li><code>git status</code> 查看文件状态</li><li><code>git add 文件名</code> 提交文件到暂存区</li><li><code>git commit -m 提交信息</code> 向仓库中提交代码</li><li><code>git log</code> 查看提交记录</li></ol><h2 id="撤销指令"><a href="#撤销指令" class="headerlink" title="撤销指令"></a>撤销指令</h2><p><code>git rm  - -cached 文件名</code> 将文件从git的暂存区中移除</p><p><code>git checkout 文件名</code> 将不正确修改的文件返回成暂存区中的文件。（即用原本的文件覆盖新的、未托管的文件）</p><p><code>git reset  - -hard 文件ID</code> 将git仓库中指定的更新记录恢复出来，并且<strong>覆盖</strong>暂存区和工作目录（电脑上的文件夹）；即只保留ID对应的文件，其余的删除掉。</p>]]></content>
      
      
      <categories>
          
          <category> 用法介绍 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git用法(进阶)</title>
      <link href="/2023/05/10/2023-5-10-Git%E7%94%A8%E6%B3%95-%E8%BF%9B%E9%98%B6/"/>
      <url>/2023/05/10/2023-5-10-Git%E7%94%A8%E6%B3%95-%E8%BF%9B%E9%98%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="Git用法（进阶）"><a href="#Git用法（进阶）" class="headerlink" title="Git用法（进阶）"></a>Git用法（进阶）</h1><h2 id="分支细分"><a href="#分支细分" class="headerlink" title="分支细分"></a>分支细分</h2><ol><li><strong>主分支（master）</strong>：第一次向git仓库中提交更新记录时自定产生的一个分支。</li><li><strong>开发分支（develop）</strong>：作为开发的分支，基于master分支创建。</li><li><strong>功能分支（feature）</strong>：作为开发具体功能的分支，基于开发分支创建。</li></ol><p><strong>具体的功能在功能分支上实现，再合并到开发分支上，最终将开发分支合并到主分支，</strong></p><p>功能分支-&gt;开发分支-&gt;主分支</p><h2 id="分支命令"><a href="#分支命令" class="headerlink" title="分支命令"></a>分支命令</h2><ul><li><code>git branch</code> <strong>查看分支</strong></li><li><code>git branch 分支名称</code> <strong>创建分支（基于当前分支）</strong></li><li><code>git checkout 分支名称</code> <strong>切换分支</strong><ul><li>切换分支之前，当前分支的工作一定提交到git仓库中，<strong>保证当前分支上的工作区是完全干净的状态</strong>。否则可能会寄。</li></ul></li><li><code>git merge 来源分支</code><strong>合并分支</strong>（将来源分支合并到所在分支）</li><li><code>git branch -d 分支名称</code><strong>删除分支</strong>（分支被合并后才允许删除）<em>（-D是强制删除）</em></li></ul><h2 id="暂时保存更改"><a href="#暂时保存更改" class="headerlink" title="暂时保存更改"></a>暂时保存更改</h2><p>在git中，可以临时提取分支上所有的改动并存储，让开发人员得到一个干净的工作副本，临时转向其他工作。</p><p><strong>使用场景：</strong>分支临时切换</p><ul><li>存储临时改动：<code>git stash</code></li><li>恢复改动：<code>git stash pop</code></li></ul><p>git的储存功能是独立于分支的，即在其他分支上也可以执行这个命令。（执行命令前要确认目前处于哪个分支）</p>]]></content>
      
      
      <categories>
          
          <category> 用法介绍 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(Java笔记)</title>
      <link href="/2023/05/10/2023-5-10-Java%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/05/10/2023-5-10-Java%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-笔记"><a href="#Java-笔记" class="headerlink" title="Java 笔记"></a>Java 笔记</h1><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><p><strong>第一个程序：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.public class test表示Hello是个类，是一个public共有的类</span></span><br><span class="line"><span class="comment">//2.Hell0&#123; &#125;表示一个类的开始和结束</span></span><br><span class="line"><span class="comment">//3.public static void main(String[] args) 表示一个主方法，即我们程序的入口</span></span><br><span class="line"><span class="comment">//4.main&#123; &#125;表示方法的开始和结束</span></span><br><span class="line"><span class="comment">//5. System.out.printIn(&quot;&quot;); 表示输出双引号内的东西到屏幕上</span></span><br><span class="line"><span class="comment">//public类只能有一个</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span>     <span class="comment">//注意，这块儿的“Hello”要和文件名一致</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.printIn(<span class="string">&quot;hello world~&quot;</span>);    <span class="comment">//注意，println是小写的L不是大写的I</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="号使用"><a href="#号使用" class="headerlink" title="+号使用"></a>+号使用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="number">100</span>+<span class="number">98</span>); <span class="comment">//198</span></span><br><span class="line">System.out.println(<span class="string">&quot;100&quot;</span>+<span class="number">98</span>); <span class="comment">//10098</span></span><br><span class="line">System.out.println(<span class="number">100</span>+<span class="number">3</span>+<span class="string">&quot;hello&quot;</span>); <span class="comment">//103hello</span></span><br><span class="line">System.out.println(<span class="string">&quot;hello&quot;</span>+<span class="number">100</span>+<span class="number">3</span>); <span class="comment">//hello1003</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ol><li>从左到右，依次运算</li><li>左右两方，有一方为字符串时，做拼接运算</li><li>左右两方都是数值时，做四则运算</li></ol><h2 id="整型细节"><a href="#整型细节" class="headerlink" title="整型细节"></a>整型细节</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"><span class="type">long</span> <span class="variable">n2</span> <span class="operator">=</span> <span class="number">1L</span>;<span class="comment">//定义long型常量为其赋值时要在常量后加&quot;l&quot;或&quot;L&quot;。</span></span><br></pre></td></tr></table></figure><h2 id="浮点数细节"><a href="#浮点数细节" class="headerlink" title="浮点数细节"></a>浮点数细节</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">float</span><span class="variable">f1</span> <span class="operator">=</span> <span class="number">1.1</span>; <span class="comment">//写法错误，java中，小数默认为double型，若为float型常量赋值，应在常量后加上“F”。</span></span><br><span class="line"><span class="type">float</span><span class="variable">f2</span> <span class="operator">=</span> <span class="number">1.1F</span>;<span class="comment">//正确</span></span><br><span class="line"><span class="type">double</span><span class="variable">f3</span> <span class="operator">=</span> <span class="number">.123</span>; <span class="comment">//正确写法，0.123可以省略小数点前的0，但小数点不可省略</span></span><br><span class="line"><span class="type">double</span><span class="variable">f4</span> <span class="operator">=</span> <span class="number">5.12e2</span>; <span class="comment">//意为5.12*(10^2)</span></span><br><span class="line"><span class="type">double</span><span class="variable">f5</span> <span class="operator">=</span> <span class="number">2.7</span>;</span><br><span class="line"><span class="type">double</span><span class="variable">f6</span> <span class="operator">=</span> <span class="number">8.1</span> /<span class="number">3</span>; <span class="comment">//结果为2.6999997</span></span><br></pre></td></tr></table></figure><p><em>对运算结果是小数的进行判断时，要小心。应该是以两个数的差值的绝对值在某个精度范围内进行判断</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(Math.abs(f5-f6) &lt; <span class="number">0.00001</span>)</span><br><span class="line">&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;差值非常小，到我的规定精度，认为相等&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字符型细节"><a href="#字符型细节" class="headerlink" title="字符型细节"></a>字符型细节</h2><p><strong>java中，char类型的本质是一个整数，再默认输出时，是unicode码对应的字符</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> <span class="variable">c1</span> <span class="operator">=</span><span class="string">&#x27;何&#x27;</span>;</span><br><span class="line">System.out.println((<span class="type">int</span>)c1); <span class="comment">//“何”对应的unicode码为20309</span></span><br><span class="line"><span class="type">char</span> <span class="variable">c2</span> <span class="operator">=</span> <span class="number">20309</span>;</span><br><span class="line">System.out.println(c2);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">&#x27;a&#x27;</span> + <span class="number">10</span>); <span class="comment">//结果为107。（编译器先将‘a’转换为97，再和10进行运算。</span></span><br></pre></td></tr></table></figure><h2 id="bool类型细节"><a href="#bool类型细节" class="headerlink" title="bool类型细节"></a>bool类型细节</h2><p><strong>布尔类型：boolean</strong>        值只能为 true 或 false</p><p>不可以以0或非0的整数替代 false 和 true</p><p><strong>和C语言不同</strong></p><p><strong>和C语言不同</strong></p><p><strong>和C语言不同</strong></p><h2 id="基本数据类型转换"><a href="#基本数据类型转换" class="headerlink" title="基本数据类型转换"></a>基本数据类型转换</h2><p>char -&gt; int -&gt; long -&gt; float -&gt; double</p><p>byte -&gt; short -&gt; int -&gt; long -&gt; float -&gt; double</p><p><strong>所以，以下代码正确</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&#x27;c&#x27;</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">80</span>;</span><br></pre></td></tr></table></figure><h3 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h3><p><strong>注意：</strong></p><ul><li>会有精度损失</li><li>会有溢出</li></ul><p>byte 和 char、short进行运算时，都先转换成int处理</p><h3 id="String类型基本转换"><a href="#String类型基本转换" class="headerlink" title="String类型基本转换"></a>String类型基本转换</h3><p><strong>基本数据类型 + “ “就转换成字符串格式了</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//基本数据类型-&gt;String</span></span><br><span class="line"><span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="type">float</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="number">1.1F</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">d1</span> <span class="operator">=</span> <span class="number">4.5</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> n1 + <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> f1 + <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> d1 + <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> b1 + <span class="string">&quot;&quot;</span>;</span><br><span class="line">System.out.println(s1 + <span class="string">&quot; &quot;</span> + s2 + <span class="string">&quot; &quot;</span> + s3 + <span class="string">&quot; &quot;</span> + s4);</span><br></pre></td></tr></table></figure><p><strong>用特定的类将字符串转换成对应的基本数据类型：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//String-&gt;对应的基本数据类型</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s5</span> <span class="operator">=</span> <span class="string">&quot;123&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> Integer.parseInt(s5);</span><br><span class="line"><span class="type">double</span> <span class="variable">num2</span> <span class="operator">=</span> Double.parseDouble(s5);</span><br><span class="line"><span class="type">float</span> <span class="variable">num3</span> <span class="operator">=</span> Float.parseFloat(s5);</span><br><span class="line"><span class="type">long</span> <span class="variable">num4</span> <span class="operator">=</span> Long.parseLong(s5);</span><br><span class="line"><span class="type">byte</span> <span class="variable">num5</span> <span class="operator">=</span> Byte.parseByte(s5);</span><br><span class="line"><span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> Boolean.parseBoolean(<span class="string">&quot;true&quot;</span>);</span><br><span class="line"><span class="type">short</span> <span class="variable">num6</span> <span class="operator">=</span> Short.parseShort(s5);</span><br><span class="line"></span><br><span class="line">System.out.println(num1);</span><br><span class="line">System.out.println(num2);</span><br><span class="line">System.out.println(num3);</span><br><span class="line">System.out.println(num4);</span><br><span class="line">System.out.println(num5);</span><br><span class="line">System.out.println(num6);</span><br><span class="line">System.out.println(b);</span><br></pre></td></tr></table></figure><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><h3 id="练习一"><a href="#练习一" class="headerlink" title="练习一"></a>练习一</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i=<span class="number">1</span>;</span><br><span class="line">i=i++;</span><br><span class="line">System.out.println(i); <span class="comment">//结果为1</span></span><br></pre></td></tr></table></figure><p>计算机实际过程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>)temp = i;</span><br><span class="line">(<span class="number">2</span>)i = i +<span class="number">1</span>;</span><br><span class="line">(<span class="number">3</span>)i = temp;</span><br></pre></td></tr></table></figure><h3 id="练习二"><a href="#练习二" class="headerlink" title="练习二"></a>练习二</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">i = ++i;</span><br><span class="line">System.out.println(i); <span class="comment">//结果为2</span></span><br></pre></td></tr></table></figure><p>计算机实际过程为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>)temp = i;</span><br><span class="line">(<span class="number">2</span>)i = i + <span class="number">1</span>;</span><br><span class="line">(<span class="number">3</span>)i = temp;</span><br></pre></td></tr></table></figure><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><ul><li> &amp;&amp; 和 &amp;的区别</li><li>&amp;&amp;(短路与)：如果第一个条件为false，则第二个条件不会判断，最终结果为false，效率高。</li><li>&amp;   (逻辑与)：不管第一个条件是否为false，第二个条件都要判断，效率低。</li></ul><p><strong>开发中，我们使用的基本上是短路与&amp;&amp;，效率高。</strong></p><ul><li>||和|的区别类似于&amp;&amp;和&amp;。一个效率高一个效率低。</li><li>^ 和 ! 表示的含义与C语言相同。</li></ul><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><p><strong>有时候复合赋值运算会进行类型转换</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span><span class="number">3</span>;</span><br><span class="line">b +=<span class="number">2</span>; <span class="comment">//等价于 b = (byte)(b +2);</span></span><br><span class="line"><span class="comment">//但是 b = b + 2;这样编译会报错。</span></span><br></pre></td></tr></table></figure><h2 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h2><p><strong>经典案例：</strong>实现三个数最大值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n1=<span class="number">55</span>;</span><br><span class="line"><span class="type">int</span> n2=<span class="number">33</span>;</span><br><span class="line"><span class="type">int</span> n3=<span class="number">123</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">max1</span> <span class="operator">=</span> n1 &gt; n2 ? n1 : n2;</span><br><span class="line"><span class="type">int</span> <span class="variable">max2</span> <span class="operator">=</span> max1 &gt; m3 ? max1 : n3;</span><br><span class="line">System.out.println(max2);</span><br></pre></td></tr></table></figure><h2 id="键盘输入"><a href="#键盘输入" class="headerlink" title="键盘输入"></a>键盘输入</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Input</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//接收用户的输入</span></span><br><span class="line">        <span class="comment">//1.引入Scanner所在的包</span></span><br><span class="line">        <span class="comment">//2.创建 Scanner 对象，new创建一个对象</span></span><br><span class="line"><span class="comment">//myScanner就是Scanner类的对象</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">myScanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="comment">//3.接收用户输入</span></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入名字&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> myScanner.next(); <span class="comment">//接收用户输入</span></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入年龄&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> myScanner.nextInt(); <span class="comment">//接收用户输入</span></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入薪水&quot;</span>);</span><br><span class="line">        <span class="type">double</span> <span class="variable">sal</span> <span class="operator">=</span> myScanner.nextDouble(); <span class="comment">//接收用户输入</span></span><br><span class="line">        System.out.println(<span class="string">&quot;人的信息如下&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;名字：&quot;</span> + name +<span class="string">&quot; 年龄：&quot;</span> + age +<span class="string">&quot; 薪水：&quot;</span> +sal);</span><br><span class="line">        <span class="type">char</span> <span class="variable">letter</span> <span class="operator">=</span> myScanner.next().charAt(<span class="number">0</span>);</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="进制"><a href="#进制" class="headerlink" title="进制"></a>进制</h2><p><strong>整数有四种表示方式：</strong></p><ol><li>二进制：0,1，满2进1，以0b或0B开头；</li><li>十进制：略；</li><li>八进制：0-7，满8进1，以数字 0 开头；</li><li>十六进制：0-9及A-F，满16进1，以0x或0X开头表示 （A-F不区分大小写）</li></ol><h2 id="跳转控制语句"><a href="#跳转控制语句" class="headerlink" title="跳转控制语句"></a>跳转控制语句</h2><ul><li>break语句出现在多层嵌套的语句块中时，可以通过标签指明要终止的是哪一层语句块</li></ul> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BreakDetail</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">    &#123;</span><br><span class="line">        abc1:<span class="comment">//标签一</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">4</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            abc2:<span class="comment">//标签二</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(i == <span class="number">2</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">break</span> abc1;<span class="comment">//从abc1中跳出去</span></span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;i = &quot;</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字符串的比较函数"><a href="#字符串的比较函数" class="headerlink" title="字符串的比较函数"></a>字符串的比较函数</h2><p>字符串的比较一般不用 <strong>==</strong> 来比较，一般会使用  <strong>.equals( )</strong> 函数来比较。</p><p><strong>一般形式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String str1;</span><br><span class="line">String str2;</span><br><span class="line">str.equals(str2);</span><br></pre></td></tr></table></figure><ul><li>如果相等，返回true</li><li>如果不相等，返回false</li></ul><p>当比较 <strong>“林黛玉”</strong> 和 <strong>str</strong> 时，有两种方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str.equals(<span class="string">&quot;林黛玉&quot;</span>);</span><br><span class="line"><span class="string">&quot;林黛玉&quot;</span>.equals(str);<span class="comment">//推荐这个写法，可以避免空指针</span></span><br></pre></td></tr></table></figure><h2 id="数组的使用"><a href="#数组的使用" class="headerlink" title="数组的使用"></a>数组的使用</h2><h3 id="方式一：动态初始化-一步到位"><a href="#方式一：动态初始化-一步到位" class="headerlink" title="方式一：动态初始化(一步到位)"></a>方式一：动态初始化(一步到位)</h3><p>数组的定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">数据类型[ ] 数组名 = <span class="keyword">new</span> 数据类型 [大小] ;</span><br><span class="line"><span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>]; <span class="comment">//创建一个数组，名字是a，存放5个int</span></span><br></pre></td></tr></table></figure><h3 id="方式二：动态初始化-先声明再创建"><a href="#方式二：动态初始化-先声明再创建" class="headerlink" title="方式二：动态初始化(先声明再创建)"></a>方式二：动态初始化(先声明再创建)</h3><p><strong>先声明数组</strong></p><p><em>语法：</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">数据类型 数组名[ ]; <span class="comment">/*也可以*/</span> 数据类型[ ] 数组名;</span><br><span class="line"><span class="type">int</span>[] a; <span class="comment">//此时 scores 是 null</span></span><br></pre></td></tr></table></figure><p><strong>创建数组：</strong></p><p><em>语法：</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">数组名=<span class="keyword">new</span> 数据类型[大小];</span><br><span class="line">a=mew <span class="type">int</span>[<span class="number">10</span>];</span><br></pre></td></tr></table></figure><h3 id="方式三：静态初始化"><a href="#方式三：静态初始化" class="headerlink" title="方式三：静态初始化"></a>方式三：静态初始化</h3><p><strong>初始化数组：</strong></p><p><em>语法：</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">数据类型 数组名[ ]= &#123;元素值，元素值...&#125;;</span><br><span class="line"><span class="type">int</span> a[]=&#123;<span class="number">2</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">89</span>,&#125;;</span><br></pre></td></tr></table></figure><h2 id="数组赋值机制"><a href="#数组赋值机制" class="headerlink" title="数组赋值机制"></a>数组赋值机制</h2><ul><li><p>基本类型数据赋值，这个值就是具体的数据，而且相互不影响</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n1=<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n2=n1;</span><br><span class="line">n2=<span class="number">80</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;n1=&quot;</span>+n1);</span><br><span class="line">System.out.println(<span class="string">&quot;n2=&quot;</span>+n2);</span><br></pre></td></tr></table></figure></li><li><p>数组在默认情况下是<strong>引用传递</strong>，赋的值是地址。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr1=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="type">int</span>[] arr2=arr1;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">    System.out.print(arr1[i]+<span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">arr2[<span class="number">0</span>]=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">    System.out.print(arr1[i]+<span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="面向对象入门"><a href="#面向对象入门" class="headerlink" title="面向对象入门"></a>面向对象入门</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Object01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">            1.new Cat() 创建一只猫</span></span><br><span class="line"><span class="comment">            2.Cat cat1=new Cat(); 把创建的猫赋值给 cat1</span></span><br><span class="line"><span class="comment">            3.cat1就是一个对象</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Cat cat1=<span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个猫类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    String color;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方法入门"><a href="#方法入门" class="headerlink" title="方法入门"></a>方法入门</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Method01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span>  <span class="title class_">person</span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        1.public 表示方法是公开的</span></span><br><span class="line"><span class="comment">        2.void 表示没有返回值</span></span><br><span class="line"><span class="comment">        3.speak 是方法名</span></span><br><span class="line"><span class="comment">        4.() 是形参列表</span></span><br><span class="line"><span class="comment">        5.&#123;&#125; 是方法体，可以写要执行的代码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">speak</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是一个好人&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="包·入门"><a href="#包·入门" class="headerlink" title="包·入门"></a>包·入门</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner; <span class="comment">//只引入java.util 包下的 Scanner类</span></span><br><span class="line"><span class="keyword">import</span> java.util.*; <span class="comment">// 将 java.util 包下的所有类都引入</span></span><br></pre></td></tr></table></figure><p><strong>建议：</strong></p><p>需要哪个类，就导入哪个类即可(向设计者看齐)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hyfstu.pkg;</span><br><span class="line"><span class="comment">//package 的作用是声明当前类所在的包，需放在类（或文件）的最上面</span></span><br><span class="line"><span class="comment">//一个类中最多只有一句 package</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">//import指令 位置在 package 下面，可以有多条且没有顺序要求</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PkgDetail</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h2><ol><li>公开级别：<strong>public</strong>，对外公开</li><li>受保护级别：<strong>protected</strong>，对子类和同一个包中的类公开</li><li>默认级别：<strong>无</strong>，向同一个包的类公开</li><li>私有级别：<strong>private</strong>，只有类本身可以访问，不对外公开</li></ol><table><thead><tr><th>1</th><th>访问级别</th><th>访问控制修饰符</th><th>同类</th><th>同包</th><th>子类</th><th>不同包</th></tr></thead><tbody><tr><td>2</td><td>公开</td><td>public</td><td>√</td><td>√</td><td>√</td><td>√</td></tr><tr><td>3</td><td>受保护</td><td>protected</td><td>√</td><td>√</td><td>√</td><td>×</td></tr><tr><td>4</td><td>默认</td><td>无</td><td>√</td><td>√</td><td>×</td><td>×</td></tr><tr><td>5</td><td>私有</td><td>private</td><td>√</td><td>×</td><td>×</td><td>×</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(C语言预处理)</title>
      <link href="/2023/05/05/2023-5-5-C%E8%AF%AD%E8%A8%80%E9%A2%84%E5%A4%84%E7%90%86/"/>
      <url>/2023/05/05/2023-5-5-C%E8%AF%AD%E8%A8%80%E9%A2%84%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="13-预处理"><a href="#13-预处理" class="headerlink" title="13.预处理"></a>13.预处理</h1><p><strong>预处理</strong>是C语言特有的功能，包括宏定义、条件编译。</p><ul><li>使用预处理功能可使程序的修改、阅读、移植和调试更加方便，也更利于实现模块化程序设计。</li></ul><h2 id="13-1-宏定义”-define”"><a href="#13-1-宏定义”-define”" class="headerlink" title="13.1 宏定义”#define”"></a>13.1 宏定义”#define”</h2><p><strong>说明:<strong>C语言没有规定 #define 必须写在函数外面，只是</strong>规定这条命令必须单独占一个完整的逻辑行。</strong>（如果字符串多于一行，可在行末用反斜杠 “ \ ” 进行续行）其作用范围是 #define <em>出现的位置到所在源文件结束</em>，<strong>或到相应地 #undef 预处理指令处。</strong>如果需要 #define 仅在某个函数内有效，完全可以把它写在函数内。</p><h3 id="13-1-1-不带参数的宏定义"><a href="#13-1-1-不带参数的宏定义" class="headerlink" title="13.1.1 不带参数的宏定义"></a>13.1.1 不带参数的宏定义</h3><p>一般形式：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> 宏名 字符串</span></span><br></pre></td></tr></table></figure><ul><li><input disabled="" type="checkbox"> **”#”**表示这是一条预处理命令。</li><li><input disabled="" type="checkbox"> <strong>宏名</strong>是一个标识符，必须符合C语言中对标识符的限定。<em>一般习惯用大写字母标识，以便与变量名相区别。</em></li><li><input disabled="" type="checkbox"> <strong>字符串</strong>可以是常数、表达式、格式字符串等。</li></ul><p><strong>注意：</strong></p><ul><li>宏定义不是C语句，不需要在行末加分号。</li><li>宏替换是以字符串代替标识符。</li></ul><p>所以可以这样子实现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> STANDARD <span class="string">&quot;You are welcome to join us.&quot;</span></span></span><br><span class="line"><span class="built_in">printf</span>(STANDARD);</span><br></pre></td></tr></table></figure><p>编译程序时，遇到标识符STANDARD，就用 “You are welcome to join us.” 替换。</p><p><strong>注意：</strong></p><p>通常会将所有 #define <code>放到文件开始处或独立的文件中</code>，而不是将它们分散到整个程序中。</p><ul><li><p><input disabled="" type="checkbox">  宏定义是一种预处理命令，不同于变量定义，它只做字符替换，而不分配内存空间。</p></li><li><p><input disabled="" type="checkbox">  可以用 #undef 命令终止宏定义的作用域，例如:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TEXT <span class="string">&quot;this is an example&quot;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(TEXT);</span><br><span class="line">    <span class="meta">#<span class="keyword">undef</span> TEXT</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="13-1-2-带参数的宏定义"><a href="#13-1-2-带参数的宏定义" class="headerlink" title="13.1.2 带参数的宏定义"></a>13.1.2 带参数的宏定义</h3><p>带参数的宏定义，不仅要进行字符串替换，还要进行参数替换。一般形式如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> 宏名（参数表） 字符串</span></span><br></pre></td></tr></table></figure><p><strong>例题：</strong>对两个数实现乘法和加法混合运算</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MIX(a,b) (a*b+b)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">5</span>,y=<span class="number">9</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;x,y:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d,%d\n&quot;</span>,x,y);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;the result is:%d\n&quot;</span>,MIX(x,y));</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译程序时，printf 语句将被替换为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;the result is:%d\n&quot;</span>,(a*b+b));</span><br></pre></td></tr></table></figure><h2 id="13-2-include命令"><a href="#13-2-include命令" class="headerlink" title="13.2 #include命令"></a>13.2 #include命令</h2><p>使用#include命令可将其他源文件的内容包含进来，即将其他文件包含到本文件之中。被读入的源文件必须用双引号或尖括号括起来。</p><p><strong>eg:</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>双引号和尖括号的区别：</strong></p><ul><li><p><input disabled="" type="checkbox">  尖括号：为标准方式，系统会直接到存放C库函数头文件所在的目录中寻找要包含的文件。</p></li><li><p><input disabled="" type="checkbox">  双引号：系统<em><strong>先</strong></em>在用户<strong>当前目录</strong>中寻找需要的文件，<em><strong>若找不到</strong></em>，<em><strong>再</strong></em>到存放C库函数头文件所在的目录中寻找要包含的文件。</p></li><li><p>通常情况下。包含库函数时，使用尖括号节省查找时间；包含用户自定义文件时，使用双引号比较快捷。文件如果不在当前目录中，双引号还可以给出文件路径。 </p></li></ul><p><strong>经常用在文件头部的被包含文件称为标题文件或头文件你，一般以.h为后缀。一般情况下，将如下内容放到.h文件中。</strong></p><ul><li><input disabled="" type="checkbox"> 宏定义</li><li><input disabled="" type="checkbox"> 结构、联合和枚举声明</li><li><input disabled="" type="checkbox"> typedef声明</li><li><input disabled="" type="checkbox"> 外部函数声明</li><li><input disabled="" type="checkbox"> 全局变量声明</li></ul><p>使用头文件的好处：需要修改某些参数时不必逐个修改程序，只需修改一个文件即可。</p><p><strong>注意：</strong></p><ul><li><input disabled="" type="checkbox"> 一个#include命令只能制定一个被包含的文件。</li><li><input disabled="" type="checkbox"> 文件包含可以嵌套，即一个被包含文件中还可以包含另一个被包含文件。</li><li><input disabled="" type="checkbox"> 若age.c中包含文件age.h，则预编译后两者会成为一个文件。如果age,h中有全局静态变量，则该全局变量在age.c文件中也有效，这时不需要再用exturn声明。</li></ul><h2 id="13-3-条件编译"><a href="#13-3-条件编译" class="headerlink" title="13.3 条件编译"></a>13.3 条件编译</h2><p>一般情况，源程序所有行都会参与编译。如果希望其中一部分内容只在满足一定条件才进行编译，这时候需要使用条件编译命令。</p><h3 id="13-3-1-if命令"><a href="#13-3-1-if命令" class="headerlink" title="13.3.1 #if命令"></a>13.3.1 #if命令</h3><p><strong>基本含义：</strong>如果#if命令后的<strong>参数表达式为真</strong>，则<strong>编译</strong>#if到#endif之间的程序段，否则跳过这段程序。</p><p><strong>一般形式如下：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> 常数表达式</span></span><br><span class="line">语句段</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><ul><li>#if 和#else的关系与if和else的关秀类似</li><li>#elif指令与 else if作用类似</li></ul><p>#elif的一般形式如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> 表达式1</span></span><br><span class="line">语句段<span class="number">1</span></span><br><span class="line"><span class="meta">#<span class="keyword">elif</span> 表达式2</span></span><br><span class="line">语句段<span class="number">2</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">#<span class="keyword">elif</span> 表达式n</span></span><br><span class="line">语句段n</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><h3 id="13-3-2-ifdef-及-ifndef命令"><a href="#13-3-2-ifdef-及-ifndef命令" class="headerlink" title="13.3.2 #ifdef 及 #ifndef命令"></a>13.3.2 #ifdef 及 #ifndef命令</h3><p>有时候只需要知道这个符号常量是否被定义了，使用#ifdef和#ifndef命令，分别表示“如果有定义”和“如果无定义”。</p><p><strong>#ifdef的一般形式如下：</strong>（#ifdef可与#else连用）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifdef</span> 宏替换名</span></span><br><span class="line">语句段<span class="number">1</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">     语句段<span class="number">2</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><h3 id="13-3-3-undef命令"><a href="#13-3-3-undef命令" class="headerlink" title="13.3.3 #undef命令"></a>13.3.3 #undef命令</h3><p>使用#undef命令可以删除事先定义好的宏定义，一般形式如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">undef</span> 宏替换名</span></span><br></pre></td></tr></table></figure><p>使用#undef命令可将宏名限制在特定的代码段中，如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_SIZE 100</span></span><br><span class="line"><span class="type">char</span> <span class="built_in">array</span>[MAX_SIZE];</span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> MAX_SIZE</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(C语言位运算)</title>
      <link href="/2023/05/05/2023-5-5-C%E8%AF%AD%E8%A8%80%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
      <url>/2023/05/05/2023-5-5-C%E8%AF%AD%E8%A8%80%E4%BD%8D%E8%BF%90%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<h1 id="12-位运算"><a href="#12-位运算" class="headerlink" title="12.位运算"></a>12.位运算</h1><h2 id="12-2-位运算操作符"><a href="#12-2-位运算操作符" class="headerlink" title="12.2 位运算操作符"></a>12.2 位运算操作符</h2><table><thead><tr><th>位运算符</th><th>含义</th><th>位运算符</th><th>含义</th></tr></thead><tbody><tr><td>&amp;</td><td>按位与</td><td>^</td><td>按位异或</td></tr><tr><td>|</td><td>按位或</td><td>&lt;&lt;</td><td>左移</td></tr><tr><td>~</td><td>取反</td><td>&gt;&gt;</td><td>右移</td></tr></tbody></table><h3 id="12-2-1-按位与运算符”-amp-”"><a href="#12-2-1-按位与运算符”-amp-”" class="headerlink" title="12.2.1 按位与运算符”&amp;”"></a>12.2.1 按位与运算符”&amp;”</h3><p>“&amp;”是双目运算符，使参与运算的两个数的二进制<strong>相与</strong></p><p>规则：<strong>只有</strong>当对应的两个二进制位<strong>均</strong>为1时，结果为1，否则为0。</p><p><strong>发现：</strong></p><ul><li>一个用途是<strong>清零</strong>，即想要原数中为1的位置为0，只需将其与对应位置为0的数相与即可；</li><li>另一个用途是取一个数中的某些特定位，eg：要取22的后5位，使其与后5位均是1的数相与即可。</li></ul><p><strong>【例题】年龄值进行与运算</strong>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> result;</span><br><span class="line">    <span class="type">int</span> age1,age2;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;age1);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;age2);</span><br><span class="line">    result = age1 &amp; age2 ;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,result);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输入25和29，输出25。</p><hr><p><strong>注意：</strong>“&amp;”和”&amp;&amp;”的区别：</p><ul><li>“&amp;&amp;”是逻辑与运算符，两个条件同时成立，逻辑与运算结果为真，否则为假；</li><li>“&amp;”是位与运算符，当两个位都为1时，结果为1，否则为0.</li></ul><hr><h3 id="12-2-2-按位或运算符”-”"><a href="#12-2-2-按位或运算符”-”" class="headerlink" title="12.2.2 按位或运算符”|”"></a>12.2.2 按位或运算符”|”</h3><p>“|”是双目运算符，使参与运算的两个数的二进制<strong>相或</strong></p><p>规则：<strong>只要</strong>当对应的两个二进制位<strong>有一个</strong>为1时，结果为1，否则为0。</p><p><strong>发现：</strong></p><p>想将某几位变为1，只需将与这几位均为1的数执行相或操作即可。</p><hr><p><strong>需要注意</strong>的地方和”&amp;”一样，”|”和”||”有不同的含义，类比”&amp;”</p><hr><h3 id="12-2-3-按位取反运算符”-”"><a href="#12-2-3-按位取反运算符”-”" class="headerlink" title="12.2.3 按位取反运算符”~”"></a>12.2.3 按位取反运算符”~”</h3><p>“~”为单目运算符，具有右结合性</p><p><strong>规则：</strong>对参与运算的数的各二进位按位取反，即0变成1，1变成0。</p><h3 id="12-2-4-按位异或运算符”-”"><a href="#12-2-4-按位异或运算符”-”" class="headerlink" title="12.2.4 按位异或运算符”^”"></a>12.2.4 按位异或运算符”^”</h3><p>“^”是双目运算符，使参与运算的两个数对应的二进位相异或。</p><p><strong>规则：</strong>对应的二进位<strong>相异时</strong>结果为1，否则结果为0。</p><p><strong>发现：</strong></p><ul><li>异或操作的一个主要用途是能使特定的位翻转。eg：想将107的二进制数的后七位翻转，只需与一个后七位都是1的数进行异或操作即可。</li><li>另一个重要用途是在不使用临时变量的情况下实现两个变量值的互换。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x=x^y;</span><br><span class="line">y=y^x;</span><br><span class="line">x=x^y;</span><br><span class="line"><span class="comment">//或者连起来用一行实现：</span></span><br><span class="line">x^=y^=x^=y;</span><br></pre></td></tr></table></figure><h3 id="12-2-5-左移运算符”-lt-lt-”"><a href="#12-2-5-左移运算符”-lt-lt-”" class="headerlink" title="12.2.5 左移运算符”&lt;&lt;”"></a>12.2.5 左移运算符”&lt;&lt;”</h3><p><strong>规则：</strong>把”&lt;&lt;”左边的运算数的各个二进位全部左移若干位；”&lt;&lt;”右边的数指定移动的位数，<strong>高位丢弃，低位补0。</strong></p><p><strong>eg：</strong>假设a=39，a的二进制数为00100111，进行a&lt;&lt;2的操作后，二进制数变成了10011100，对应的十进制数为156。</p><p><strong>发现：</strong>a左移一位相当于给a乘2(<strong>仅限于移出位不包含1的情况</strong>)</p><h3 id="12-2-6-右移运算符”-gt-gt-”"><a href="#12-2-6-右移运算符”-gt-gt-”" class="headerlink" title="12.2.6 右移运算符”&gt;&gt;”"></a>12.2.6 右移运算符”&gt;&gt;”</h3><p><strong>规则：</strong>把”&gt;&gt;”左边的运算数的各个二进位全部右移若干位；”&lt;&lt;”右边的数指定移动的位数。</p><p><strong>说明：</strong>对于有符号数，右移要注意符号位的问题。</p><ul><li>正数时：最高位一般补0；</li><li>负数时：最高位是补0还是补1，取决于编译系统的规定。移入的0称为”逻辑右移”，移入的1称为”算数右移”。</li></ul><h2 id="12-3-循环移位"><a href="#12-3-循环移位" class="headerlink" title="12.3 循环移位"></a>12.3 循环移位</h2><p><strong>eg:循环左移：</strong></p><p>分为三步：</p><p>1.首先将x的左端n位先放到z的低n位中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">z=x&gt;&gt;(<span class="number">32</span>-n);       <span class="comment">//32为一个整型数字所占的字节数</span></span><br></pre></td></tr></table></figure><p>2.然后将x左移n位，其右面低n位补0：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">y=x&lt;&lt;n;</span><br></pre></td></tr></table></figure><p>3.最后将y、z进行或运算：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">y=y|z;</span><br></pre></td></tr></table></figure><p><strong>循环右移也是如此：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">z=x&lt;&lt;(<span class="number">32</span>-n);</span><br><span class="line">y=x&gt;&gt;n;</span><br><span class="line">y=y|z;</span><br></pre></td></tr></table></figure><h2 id="12-4-位段"><a href="#12-4-位段" class="headerlink" title="12.4 位段"></a>12.4 位段</h2><h3 id="12-4-1-位段的概念与定义"><a href="#12-4-1-位段的概念与定义" class="headerlink" title="12.4.1 位段的概念与定义"></a>12.4.1 位段的概念与定义</h3><p>位段是一种特殊的结构体类型，其所有成员的长度<strong>均以二进制位</strong>为单位进行定义，结构体中的成员称为位段。</p><p>位段的一般形式如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> 结构体名</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    类型 变量名 <span class="number">1</span>：长度；</span><br><span class="line">    类型 变量名 <span class="number">2</span>：长度；</span><br><span class="line">    ...</span><br><span class="line">    类型 变量名 n：长度；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个位段必须是int、unsigned 或signed 中的一种。</p><p><strong>例如：</strong>CPU的状态寄存器按位段类型定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">status</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">unsigned</span> sign:<span class="number">1</span>;</span><br><span class="line">    <span class="type">unsigned</span> zero:<span class="number">1</span>;</span><br><span class="line">    <span class="type">unsigned</span> carry:<span class="number">1</span>;</span><br><span class="line">    <span class="type">unsigned</span> parity:<span class="number">1</span>;</span><br><span class="line">    <span class="type">unsigned</span> half_carry:<span class="number">1</span>;</span><br><span class="line">    <span class="type">unsigned</span> negative:<span class="number">1</span>;</span><br><span class="line">&#125;flags;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(C语言)指针</title>
      <link href="/2023/05/05/2023-5-5-C%E8%AF%AD%E8%A8%80-%E6%8C%87%E9%92%88/"/>
      <url>/2023/05/05/2023-5-5-C%E8%AF%AD%E8%A8%80-%E6%8C%87%E9%92%88/</url>
      
        <content type="html"><![CDATA[<h1 id="10指针"><a href="#10指针" class="headerlink" title="10指针"></a>10指针</h1><h2 id="10-1-指针的相关概念"><a href="#10-1-指针的相关概念" class="headerlink" title="10.1 指针的相关概念"></a>10.1 指针的相关概念</h2><h3 id="10-1-1-地址与指针"><a href="#10-1-1-地址与指针" class="headerlink" title="10.1.1 地址与指针"></a>10.1.1 地址与指针</h3><p>变量的地址形象的称为该变量的“指针”。</p><p>eg;通过地址可以访问到变量的值。</p><h3 id="10-1-3-指针变量"><a href="#10-1-3-指针变量" class="headerlink" title="10.1.3 指针变量"></a>10.1.3 指针变量</h3><h4 id="1-指针变量的定义"><a href="#1-指针变量的定义" class="headerlink" title="1.指针变量的定义"></a>1.指针变量的定义</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类型说明 *变量名;</span><br></pre></td></tr></table></figure><ul><li>“*”表示该变量是个指针变量</li><li>“变量名为定义的指针变量名”</li><li>“类型说明表示指针变量所指向的变量的数据类型”</li></ul><h4 id="2-指针变量的赋值"><a href="#2-指针变量的赋值" class="headerlink" title="2.指针变量的赋值"></a>2.指针变量的赋值</h4><p>两种方法：</p><p><em>（1）定义指针变量的同时进行赋值</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="type">int</span> *p=&amp;a;</span><br></pre></td></tr></table></figure><p><em>(2)先定义指针变量，再赋值</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="type">int</span>*p;</span><br><span class="line">p=&amp;a;</span><br></pre></td></tr></table></figure><p>**之后赋值的时候，注意指针变量前不能加“ * ” **</p><h4 id="3-指针变量的引用"><a href="#3-指针变量的引用" class="headerlink" title="3.指针变量的引用"></a>3.指针变量的引用</h4><p><code>引用形式为“ *指针变量 ”，含义是引用指针变量所指向的值。</code></p><h4 id="4-“-amp-”和“-”运算符"><a href="#4-“-amp-”和“-”运算符" class="headerlink" title="4.“&amp;”和“*”运算符"></a>4.“&amp;”和“*”运算符</h4><ul><li>“*”是指针运算符，返回指针变量对应的地址内保存的变量值。</li><li>“&amp;”是取址运算符，返回变量的地址。</li></ul><p><strong>5.“ &amp;* ”和“ *&amp;”的区别</strong></p><p>优先级相同，遵循从右向左的顺序</p><p>&amp;*后跟地址变量；</p><p>*&amp;后跟普通变量名；</p><h3 id="10-1-4-指针的自增，自减运算"><a href="#10-1-4-指针的自增，自减运算" class="headerlink" title="10.1.4 指针的自增，自减运算"></a>10.1.4 指针的自增，自减运算</h3><h2 id="10-2-数组与指针"><a href="#10-2-数组与指针" class="headerlink" title="10.2 数组与指针"></a>10.2 数组与指针</h2><h3 id="10-2-1-一维数组与指针"><a href="#10-2-1-一维数组与指针" class="headerlink" title="10.2.1 一维数组与指针"></a>10.2.1 一维数组与指针</h3><p><em><strong>数组首元素的地址即为数组的首地址</strong></em></p><p>可用<strong>指针输出</strong>数组的值：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a[<span class="number">5</span>],b[<span class="number">5</span>];</span><br><span class="line"><span class="type">int</span> *p,*q;</span><br><span class="line">p=&amp;a[<span class="number">0</span>];</span><br><span class="line">q=b;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入数组a：&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入数组b：&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">5</span>;j++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;b[j]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a数组为：&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,*p++);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;b数组为：&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">5</span>;j++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,*q++);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>p++或p=p+1不是简单的将地址+1，而是指向数组的下一个元素</p><p><strong>也可进行改写，使数组的输入、输出都由指针实现</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a[<span class="number">5</span>],b[<span class="number">5</span>];</span><br><span class="line"><span class="type">int</span> *p,*q;</span><br><span class="line">p=&amp;a[<span class="number">0</span>];</span><br><span class="line">q=b;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入数组a：&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,p++);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入数组b：&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">5</span>;j++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,q++);</span><br><span class="line"></span><br><span class="line">p=a;          <span class="comment">/*attention*/</span></span><br><span class="line">q=b;          <span class="comment">/*attention*/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a数组为：&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,*p++);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;b数组为：&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">5</span>;j++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,*q++);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>attention</strong>的位置要注意，输入结束后，指针p和指针q在a[4]和b[4]的位置，输出前需要<strong>初始化</strong>，使它位于a[0]和b[0]的位置。</p>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>Gallary</title>
      <link href="/Gallary/index.html"/>
      <url>/Gallary/index.html</url>
      
        <content type="html"><![CDATA[<div class="gallery">    <div class="fj-gallery lazyload data" data-rowHeight="220" data-limit="10">    <span class="gallery-data">[{"url":"https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg","alt":""},{"url":"https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg","alt":""},{"url":"https://i.loli.net/2019/12/25/gEy5Zc1Ai6VuO4N.jpg","alt":""},{"url":"https://i.loli.net/2019/12/25/d6QHbytlSYO4FBG.jpg","alt":""},{"url":"https://i.loli.net/2019/12/25/6nepIJ1xTgufatZ.jpg","alt":""},{"url":"https://i.loli.net/2019/12/25/E7Jvr4eIPwUNmzq.jpg","alt":""},{"url":"https://i.loli.net/2019/12/25/mh19anwBSWIkGlH.jpg","alt":""},{"url":"https://i.loli.net/2019/12/25/2tu9JC8ewpBFagv.jpg","alt":""}]</span>    </div>    <button class="gallery-load-more"><span>加载更多</span><i class="fa-solid fa-arrow-down"></i></button>    </div><div class="gallery">    <div class="fj-gallery lazyload data" data-rowHeight="220" data-limit="5">    <span class="gallery-data">[{"url":"https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg","alt":""},{"url":"https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg","alt":""},{"url":"https://i.loli.net/2019/12/25/gEy5Zc1Ai6VuO4N.jpg","alt":""},{"url":"https://i.loli.net/2019/12/25/d6QHbytlSYO4FBG.jpg","alt":""},{"url":"https://i.loli.net/2019/12/25/6nepIJ1xTgufatZ.jpg","alt":""},{"url":"https://i.loli.net/2019/12/25/E7Jvr4eIPwUNmzq.jpg","alt":""},{"url":"https://i.loli.net/2019/12/25/mh19anwBSWIkGlH.jpg","alt":""},{"url":"https://i.loli.net/2019/12/25/2tu9JC8ewpBFagv.jpg","alt":""}]</span>    </div>    <button class="gallery-load-more"><span>加载更多</span><i class="fa-solid fa-arrow-down"></i></button>    </div><p>作者: Jerry<br>連結: <a href="https://butterfly.js.org/posts/4aa8abbe/#Gallery%E7%9B%B8%E5%86%8A">https://butterfly.js.org/posts/4aa8abbe/#Gallery%E7%9B%B8%E5%86%8A</a><br>來源: Butterfly<br>著作權歸作者所有。商業轉載請聯絡作者獲得授權，非商業轉載請註明出處。</p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>关于</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[/* 页脚与头图透明 */#footer {    background: transparent !important;  }  #page-header {    background: transparent !important;  }    /* 白天模式遮罩透明 */  #footer::before {    background: transparent !important;  }  #page-header::before {    background: transparent !important;  }    /* 夜间模式遮罩透明 */  [data-theme="dark"] #footer::before {    background: transparent !important;  }  [data-theme="dark"] #page-header::before {    background: transparent !important;  }]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>link</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>电影</title>
      <link href="/movies/index.html"/>
      <url>/movies/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>音乐</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
